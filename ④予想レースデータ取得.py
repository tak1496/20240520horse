from bs4 import BeautifulSoup
import requests
from datetime import datetime
import datetime as dd
import numpy as np
import csv
import sys
import re
import statistics
import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler
import pyparsing as pp
import lightgbm as lgb
import optuna.integration.lightgbm as lgb2
import math
import time
import pickle

#対象レースデータの取得
c = int(input("競馬場："))
#race_date = input("レース日：")
#racecourse=input("競馬場(アルファベット)：")

#下2桁（レースID）は消す
race_date = '2024/12/01'
if c==1:
    main_page_url = "https://race.netkeiba.com/race/shutuba.html?race_id=2024060502"
    racecourse = '中山'
elif c==2:
    main_page_url = "https://race.netkeiba.com/race/shutuba.html?race_id=2024080702"
    racecourse = '京都'
elif c==3:
    main_page_url = "https://race.netkeiba.com/race/shutuba.html?race_id=2024070402"
    racecourse = '中京'

start = int(input("レース："))
val = input("連続：")
if val=="1":
    end = 13
else:
    end = start+1

# 現在の日付を取得
now = datetime.now()
# cutoff_date を datetime 型に変換
cutoff_date = datetime.strptime(race_date, '%Y/%m/%d')
ago_date = cutoff_date - dd.timedelta(days=730)

def split_date(df, test_size):
    sorted_id_list = df.sort_values('日付').index.unique()
    train_id_list = sorted_id_list[:round(len(sorted_id_list) * (1-test_size))]
    test_id_list = sorted_id_list[round(len(sorted_id_list) * (1-test_size)):]
    train = df.loc[train_id_list]
    test = df.loc[test_id_list]
    return train, test

class_mappings = {'4歳以上':3, '４歳以上':3, '3歳以上':3, '３歳以上':3, '3歳':2, '３歳':2, '2歳':1, '２歳':1,'障害':0}
def class_mapping(row):
    for key, value in class_mappings.items():
        if key in row:
            return value
    return 0  # If no mapping is found, return 0

def age_mapping(age):
    age = int(age)
    if age>3:
        return 3
    else:
        return age-1

def weight_mapping(w):
    if w>=12:
        return 3
    elif w>=10:
        return 2
    elif w>=8:
        return 1
    elif w<=-12:
        return 3
    elif w<=-10:
        return 2
    elif w<=-8:
        return 1
    else:
        return 0

def weight_time_mapping(w):
    if w>=12:
        return 1
    elif w>=10:
        return 0.6
    elif w>=8:
        return 0.3
    elif w<=-12:
        return 1
    elif w<=-10:
        return 0.6
    elif w<=-8:
        return 0.3
    else:
        return 0

def pace_mapping(p):
    if p == 'S':
        return 1
    elif p == 'M':
        return 2
    elif p == 'H':
        return 3
    else:
        return 2

course_mapping = {"札幌":"01", "函館":"02", "福島":"03", "新潟":"04", "東京":"05", "中山":"06", "中京":"07", "京都":"08", "阪神":"09", "小倉":"10"}
mawari_mapping = {'右': 0, '左': 1, '芝': 2, '直': 2}

##出走したデータの読み込み
df_race = pd.read_csv('encoded/race_list.csv')
#df_race = df_race.sort_values(['日付','race_id'])
df_race.sort_values(by=['馬', '日付'], ascending=[True, False], inplace=True)
data = df_race

'''
course = df_race.groupby(['場id','距離','芝・ダート'])['走破時間'].min().reset_index()
drop_col = ["枠番","馬番","斤量","通過順3","通過順4","ペース","33Lap","タイム差","斤量比"]
drop_item=[]
for i, row in enumerate(course.itertuples()):
    for j in range(len(drop_col)):
        drop_item.append("C"+str(row[1])+"_"+str(row[2])+"_"+str(row[3])+"_"+drop_col[j])
'''
drop_col = ["枠番","馬番",                                                        "33Lap","タイム差",         "PCI","体重差"]
f = open("encoded/dis_column_data.txt","rb")
drop_list = pickle.load(f)

f = open("encoded/course_column_data.txt","rb")
course_colm_list = pickle.load(f)

drop_item=[]
for i in range(len(drop_list)):
    for j in range(len(drop_col)):
        drop_item.append(drop_list[i]+"_"+drop_col[j])
    
##レースデータの読み込み
#df_course = pd.read_csv('encoded/course_data.csv')

##レースタイムデータの読み込み
#df_time = pd.read_csv('encoded/course_time.csv')

##ホースデータの読み込み
df_horse = pd.read_csv('encoded/horse_data.csv')

##コースタイムデータの読み込み
df_course_time = pd.read_csv('encoded/course_time.csv')

p = []

header = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"}

for race_no in range(start, end):
    race_num = str(race_no).zfill(2)
    race_id = main_page_url.split("=")[-1] + race_num
    for zzz in range(10):
        time.sleep(1)
        response = requests.get(main_page_url + race_num, headers=header)
        if response.status_code == 200:
            break

    print(main_page_url + race_num)

    soup = BeautifulSoup(response.content, "html.parser")

    #新馬戦は除外する
    main_racename = soup.find("h1", class_="RaceName")
    #if "新馬" in main_racename.text.strip() or "2歳未勝利" in main_racename.text.strip():
    if "新馬" in main_racename.text.strip():
        continue

    # "RaceData01"クラスのdivを検索
    element = soup.find("div", class_="RaceData01")
    # 該当要素からテキストを取得
    text = element.text if element else ""

    # テキストからコース種別、距離、方向、天候を抽出
    main_direction = re.search(r"(左|右|直)", text).group() if re.search(r"(左|右|直)", text) else ""
    main_weather = re.search(r"天候:(\w+)", text).group(1) if re.search(r"天候:(\w+)", text) else ""

    if main_direction == "直":
        continue
    
    main_course = re.search(r"(外)", text).group() if re.search(r"(外)", text) else ""
    if main_course=="外":
        main_course=1
    else:
        main_course=0

    span = element.find("span").text.strip()
    main_distance = span[1:-1]
    shiba_mapping = {'芝': 0, 'ダ': 1, '障': 2}
    main_track = shiba_mapping.get(span[0])
    track_chk = main_track
    if main_track==2:
        continue
    
    main_mawari = mawari_mapping.get(main_direction)

    babaSpan = soup.find("span", class_="Item03")
    main_baba = ""
    if soup.find("span", class_="Item03") is not None:
        main_baba = babaSpan.text.strip()[-1]
        
    elif soup.find("span", class_="Item04") is not None:
        babaSpan = soup.find("span", class_="Item04")
        main_baba = babaSpan.text.strip()[-1]
    
    baba_mapping = {'良': 0, '稍': 1, '重': 2, '不': 3}
    main_baba = baba_mapping.get(main_baba)

    tenki_mapping = {'晴': 0, '曇': 1, '小': 2, '雨': 3, '雪': 4}
    main_tenki = tenki_mapping.get(main_weather)

    race_data = soup.find("div", class_="RaceData02")
    # spanタグのリストを取得します
    spans = race_data.find_all('span')

    # 2番目のspanタグ（インデックスは0から始まるため1を指定）のテキストを取得します
    main_location = spans[1].text
    main_place = ""
    if main_location == "札幌":
        main_place = "01"
    elif main_location == "函館":
        main_place = "02"
    elif main_location == "福島":
        main_place = "03"
    elif main_location == "新潟":
        main_place = "04"
    elif main_location == "東京":
        main_place = "05"
    elif main_location == "中山":
        main_place = "06"
    elif main_location == "中京":
        main_place = "07"
    elif main_location == "京都":
        main_place = "08"
    elif main_location == "阪神":
        main_place = "09"
    elif main_location == "小倉":
        main_place = "10"

    # "RaceName"クラスのdivを検索
    divRaceName = soup.find("h1", class_="RaceName")
    #レース名
    main_race_name = divRaceName.text.strip()

    soup_race = soup.find("div",class_="RaceData02")
    main_cls = class_mapping(str(soup_race.find_all("span")[3].get_text()))

    all_results = []  # 全てレース結果を保存するためのリスト
    #all_results.append(["race_id","馬","騎手","枠番","馬番","走破時間","着順","体重","体重変化","性","齢","斤量","上がり","日付","クラス","芝・ダート","距離","回り","馬場","コース内外","場id","6F","33Lap","side3","side4","脚質","通過順3","通過順4","ペース","3Fペース","トレセン","調教師","馬主","Sラップ","タイム差","走破時間換算","斤量比","class_id","course_id","PCI","平均体重","体重差","平均PCI","PCI差","父","父父","母父","C1_0_0","C1_1_0","C2_0_0","C2_1_0","C3_0_0","C3_1_0","C4_0_0","C4_0_1","C4_1_0","C5_0_0","C5_1_0","C6_0_0","C6_0_1","C6_1_0","C7_0_0","C7_1_0","C8_0_0","C8_0_1","C8_1_0","C9_0_0","C9_0_1","C9_1_0","C10_0_0","C10_1_0","左回","右回","直線長","直線短","急カーブ","複合カーブ","スパイラル","小回","ゴール前平坦","ゴール前緩坂","ゴール前急坂","芝","ダート","馬番成績","騎手成績","調教師成績","父成績"])
    colm_items = ["race_id","馬","騎手","枠番","馬番","走破時間","着順","体重","体重変化","性","齢","斤量","上がり","日付","クラス","芝・ダート","距離","回り","馬場","コース内外","場id","6F","33Lap","side3","side4","脚質","通過順3","通過順4","ペース","3Fペース","トレセン","調教師","馬主","Sラップ","タイム差","走破時間換算","斤量比","class_id","course_id","PCI","平均体重","体重差","平均PCI","PCI差","父","父父","母父","C1_0_0","C1_1_0","C2_0_0","C2_1_0","C3_0_0","C3_1_0","C4_0_0","C4_0_1","C4_1_0","C5_0_0","C5_1_0","C6_0_0","C6_0_1","C6_1_0","C7_0_0","C7_1_0","C8_0_0","C8_0_1","C8_1_0","C9_0_0","C9_0_1","C9_1_0","C10_0_0","C10_1_0","左回","右回","直線長","直線短","急カーブ","複合カーブ","スパイラル","小回","ゴール前平坦","ゴール前緩坂","ゴール前急坂","芝","ダート","馬番成績","騎手成績","調教師成績","父成績",
	"C1_1000_0_枠番","C1_1000_0_馬番","C1_1000_0_走破時間","C1_1000_0_斤量","C1_1000_0_上がり","C1_1000_0_33Lap","C1_1000_0_通過順3","C1_1000_0_通過順4","C1_1000_0_ペース","C1_1000_0_タイム差","C1_1000_0_斤量比","C1_1000_0_PCI","C1_1000_0_体重差",
	"C1_1000_1_枠番","C1_1000_1_馬番","C1_1000_1_走破時間","C1_1000_1_斤量","C1_1000_1_上がり","C1_1000_1_33Lap","C1_1000_1_通過順3","C1_1000_1_通過順4","C1_1000_1_ペース","C1_1000_1_タイム差","C1_1000_1_斤量比","C1_1000_1_PCI","C1_1000_1_体重差",
	"C1_1200_0_枠番","C1_1200_0_馬番","C1_1200_0_走破時間","C1_1200_0_斤量","C1_1200_0_上がり","C1_1200_0_33Lap","C1_1200_0_通過順3","C1_1200_0_通過順4","C1_1200_0_ペース","C1_1200_0_タイム差","C1_1200_0_斤量比","C1_1200_0_PCI","C1_1200_0_体重差",
	"C1_1500_0_枠番","C1_1500_0_馬番","C1_1500_0_走破時間","C1_1500_0_斤量","C1_1500_0_上がり","C1_1500_0_33Lap","C1_1500_0_通過順3","C1_1500_0_通過順4","C1_1500_0_ペース","C1_1500_0_タイム差","C1_1500_0_斤量比","C1_1500_0_PCI","C1_1500_0_体重差",
	"C1_1700_1_枠番","C1_1700_1_馬番","C1_1700_1_走破時間","C1_1700_1_斤量","C1_1700_1_上がり","C1_1700_1_33Lap","C1_1700_1_通過順3","C1_1700_1_通過順4","C1_1700_1_ペース","C1_1700_1_タイム差","C1_1700_1_斤量比","C1_1700_1_PCI","C1_1700_1_体重差",
	"C1_1800_0_枠番","C1_1800_0_馬番","C1_1800_0_走破時間","C1_1800_0_斤量","C1_1800_0_上がり","C1_1800_0_33Lap","C1_1800_0_通過順3","C1_1800_0_通過順4","C1_1800_0_ペース","C1_1800_0_タイム差","C1_1800_0_斤量比","C1_1800_0_PCI","C1_1800_0_体重差",
	"C1_2000_0_枠番","C1_2000_0_馬番","C1_2000_0_走破時間","C1_2000_0_斤量","C1_2000_0_上がり","C1_2000_0_33Lap","C1_2000_0_通過順3","C1_2000_0_通過順4","C1_2000_0_ペース","C1_2000_0_タイム差","C1_2000_0_斤量比","C1_2000_0_PCI","C1_2000_0_体重差",
	"C1_2400_1_枠番","C1_2400_1_馬番","C1_2400_1_走破時間","C1_2400_1_斤量","C1_2400_1_上がり","C1_2400_1_33Lap","C1_2400_1_通過順3","C1_2400_1_通過順4","C1_2400_1_ペース","C1_2400_1_タイム差","C1_2400_1_斤量比","C1_2400_1_PCI","C1_2400_1_体重差",
	"C1_2600_0_枠番","C1_2600_0_馬番","C1_2600_0_走破時間","C1_2600_0_斤量","C1_2600_0_上がり","C1_2600_0_33Lap","C1_2600_0_通過順3","C1_2600_0_通過順4","C1_2600_0_ペース","C1_2600_0_タイム差","C1_2600_0_斤量比","C1_2600_0_PCI","C1_2600_0_体重差",
	"C2_1000_0_枠番","C2_1000_0_馬番","C2_1000_0_走破時間","C2_1000_0_斤量","C2_1000_0_上がり","C2_1000_0_33Lap","C2_1000_0_通過順3","C2_1000_0_通過順4","C2_1000_0_ペース","C2_1000_0_タイム差","C2_1000_0_斤量比","C2_1000_0_PCI","C2_1000_0_体重差",
	"C2_1000_1_枠番","C2_1000_1_馬番","C2_1000_1_走破時間","C2_1000_1_斤量","C2_1000_1_上がり","C2_1000_1_33Lap","C2_1000_1_通過順3","C2_1000_1_通過順4","C2_1000_1_ペース","C2_1000_1_タイム差","C2_1000_1_斤量比","C2_1000_1_PCI","C2_1000_1_体重差",
	"C2_1200_0_枠番","C2_1200_0_馬番","C2_1200_0_走破時間","C2_1200_0_斤量","C2_1200_0_上がり","C2_1200_0_33Lap","C2_1200_0_通過順3","C2_1200_0_通過順4","C2_1200_0_ペース","C2_1200_0_タイム差","C2_1200_0_斤量比","C2_1200_0_PCI","C2_1200_0_体重差",
	"C2_1700_1_枠番","C2_1700_1_馬番","C2_1700_1_走破時間","C2_1700_1_斤量","C2_1700_1_上がり","C2_1700_1_33Lap","C2_1700_1_通過順3","C2_1700_1_通過順4","C2_1700_1_ペース","C2_1700_1_タイム差","C2_1700_1_斤量比","C2_1700_1_PCI","C2_1700_1_体重差",
	"C2_1800_0_枠番","C2_1800_0_馬番","C2_1800_0_走破時間","C2_1800_0_斤量","C2_1800_0_上がり","C2_1800_0_33Lap","C2_1800_0_通過順3","C2_1800_0_通過順4","C2_1800_0_ペース","C2_1800_0_タイム差","C2_1800_0_斤量比","C2_1800_0_PCI","C2_1800_0_体重差",
	"C2_2000_0_枠番","C2_2000_0_馬番","C2_2000_0_走破時間","C2_2000_0_斤量","C2_2000_0_上がり","C2_2000_0_33Lap","C2_2000_0_通過順3","C2_2000_0_通過順4","C2_2000_0_ペース","C2_2000_0_タイム差","C2_2000_0_斤量比","C2_2000_0_PCI","C2_2000_0_体重差",
	"C2_2400_1_枠番","C2_2400_1_馬番","C2_2400_1_走破時間","C2_2400_1_斤量","C2_2400_1_上がり","C2_2400_1_33Lap","C2_2400_1_通過順3","C2_2400_1_通過順4","C2_2400_1_ペース","C2_2400_1_タイム差","C2_2400_1_斤量比","C2_2400_1_PCI","C2_2400_1_体重差",
	"C2_2600_0_枠番","C2_2600_0_馬番","C2_2600_0_走破時間","C2_2600_0_斤量","C2_2600_0_上がり","C2_2600_0_33Lap","C2_2600_0_通過順3","C2_2600_0_通過順4","C2_2600_0_ペース","C2_2600_0_タイム差","C2_2600_0_斤量比","C2_2600_0_PCI","C2_2600_0_体重差",
	"C3_1000_0_枠番","C3_1000_0_馬番","C3_1000_0_走破時間","C3_1000_0_斤量","C3_1000_0_上がり","C3_1000_0_33Lap","C3_1000_0_通過順3","C3_1000_0_通過順4","C3_1000_0_ペース","C3_1000_0_タイム差","C3_1000_0_斤量比","C3_1000_0_PCI","C3_1000_0_体重差",
	"C3_1000_1_枠番","C3_1000_1_馬番","C3_1000_1_走破時間","C3_1000_1_斤量","C3_1000_1_上がり","C3_1000_1_33Lap","C3_1000_1_通過順3","C3_1000_1_通過順4","C3_1000_1_ペース","C3_1000_1_タイム差","C3_1000_1_斤量比","C3_1000_1_PCI","C3_1000_1_体重差",
	"C3_1150_1_枠番","C3_1150_1_馬番","C3_1150_1_走破時間","C3_1150_1_斤量","C3_1150_1_上がり","C3_1150_1_33Lap","C3_1150_1_通過順3","C3_1150_1_通過順4","C3_1150_1_ペース","C3_1150_1_タイム差","C3_1150_1_斤量比","C3_1150_1_PCI","C3_1150_1_体重差",
	"C3_1200_0_枠番","C3_1200_0_馬番","C3_1200_0_走破時間","C3_1200_0_斤量","C3_1200_0_上がり","C3_1200_0_33Lap","C3_1200_0_通過順3","C3_1200_0_通過順4","C3_1200_0_ペース","C3_1200_0_タイム差","C3_1200_0_斤量比","C3_1200_0_PCI","C3_1200_0_体重差",
	"C3_1700_0_枠番","C3_1700_0_馬番","C3_1700_0_走破時間","C3_1700_0_斤量","C3_1700_0_上がり","C3_1700_0_33Lap","C3_1700_0_通過順3","C3_1700_0_通過順4","C3_1700_0_ペース","C3_1700_0_タイム差","C3_1700_0_斤量比","C3_1700_0_PCI","C3_1700_0_体重差",
	"C3_1700_1_枠番","C3_1700_1_馬番","C3_1700_1_走破時間","C3_1700_1_斤量","C3_1700_1_上がり","C3_1700_1_33Lap","C3_1700_1_通過順3","C3_1700_1_通過順4","C3_1700_1_ペース","C3_1700_1_タイム差","C3_1700_1_斤量比","C3_1700_1_PCI","C3_1700_1_体重差",
	"C3_1800_0_枠番","C3_1800_0_馬番","C3_1800_0_走破時間","C3_1800_0_斤量","C3_1800_0_上がり","C3_1800_0_33Lap","C3_1800_0_通過順3","C3_1800_0_通過順4","C3_1800_0_ペース","C3_1800_0_タイム差","C3_1800_0_斤量比","C3_1800_0_PCI","C3_1800_0_体重差",
	"C3_2000_0_枠番","C3_2000_0_馬番","C3_2000_0_走破時間","C3_2000_0_斤量","C3_2000_0_上がり","C3_2000_0_33Lap","C3_2000_0_通過順3","C3_2000_0_通過順4","C3_2000_0_ペース","C3_2000_0_タイム差","C3_2000_0_斤量比","C3_2000_0_PCI","C3_2000_0_体重差",
	"C3_2400_1_枠番","C3_2400_1_馬番","C3_2400_1_走破時間","C3_2400_1_斤量","C3_2400_1_上がり","C3_2400_1_33Lap","C3_2400_1_通過順3","C3_2400_1_通過順4","C3_2400_1_ペース","C3_2400_1_タイム差","C3_2400_1_斤量比","C3_2400_1_PCI","C3_2400_1_体重差",
	"C3_2600_0_枠番","C3_2600_0_馬番","C3_2600_0_走破時間","C3_2600_0_斤量","C3_2600_0_上がり","C3_2600_0_33Lap","C3_2600_0_通過順3","C3_2600_0_通過順4","C3_2600_0_ペース","C3_2600_0_タイム差","C3_2600_0_斤量比","C3_2600_0_PCI","C3_2600_0_体重差",
	"C4_1200_0_枠番","C4_1200_0_馬番","C4_1200_0_走破時間","C4_1200_0_斤量","C4_1200_0_上がり","C4_1200_0_33Lap","C4_1200_0_通過順3","C4_1200_0_通過順4","C4_1200_0_ペース","C4_1200_0_タイム差","C4_1200_0_斤量比","C4_1200_0_PCI","C4_1200_0_体重差",
	"C4_1200_1_枠番","C4_1200_1_馬番","C4_1200_1_走破時間","C4_1200_1_斤量","C4_1200_1_上がり","C4_1200_1_33Lap","C4_1200_1_通過順3","C4_1200_1_通過順4","C4_1200_1_ペース","C4_1200_1_タイム差","C4_1200_1_斤量比","C4_1200_1_PCI","C4_1200_1_体重差",
	"C4_1400_0_枠番","C4_1400_0_馬番","C4_1400_0_走破時間","C4_1400_0_斤量","C4_1400_0_上がり","C4_1400_0_33Lap","C4_1400_0_通過順3","C4_1400_0_通過順4","C4_1400_0_ペース","C4_1400_0_タイム差","C4_1400_0_斤量比","C4_1400_0_PCI","C4_1400_0_体重差",
	"C4_1600_0_枠番","C4_1600_0_馬番","C4_1600_0_走破時間","C4_1600_0_斤量","C4_1600_0_上がり","C4_1600_0_33Lap","C4_1600_0_通過順3","C4_1600_0_通過順4","C4_1600_0_ペース","C4_1600_0_タイム差","C4_1600_0_斤量比","C4_1600_0_PCI","C4_1600_0_体重差",
	"C4_1700_1_枠番","C4_1700_1_馬番","C4_1700_1_走破時間","C4_1700_1_斤量","C4_1700_1_上がり","C4_1700_1_33Lap","C4_1700_1_通過順3","C4_1700_1_通過順4","C4_1700_1_ペース","C4_1700_1_タイム差","C4_1700_1_斤量比","C4_1700_1_PCI","C4_1700_1_体重差",
	"C4_1800_0_枠番","C4_1800_0_馬番","C4_1800_0_走破時間","C4_1800_0_斤量","C4_1800_0_上がり","C4_1800_0_33Lap","C4_1800_0_通過順3","C4_1800_0_通過順4","C4_1800_0_ペース","C4_1800_0_タイム差","C4_1800_0_斤量比","C4_1800_0_PCI","C4_1800_0_体重差",
	"C4_1800_1_枠番","C4_1800_1_馬番","C4_1800_1_走破時間","C4_1800_1_斤量","C4_1800_1_上がり","C4_1800_1_33Lap","C4_1800_1_通過順3","C4_1800_1_通過順4","C4_1800_1_ペース","C4_1800_1_タイム差","C4_1800_1_斤量比","C4_1800_1_PCI","C4_1800_1_体重差",
	"C4_2000_0_枠番","C4_2000_0_馬番","C4_2000_0_走破時間","C4_2000_0_斤量","C4_2000_0_上がり","C4_2000_0_33Lap","C4_2000_0_通過順3","C4_2000_0_通過順4","C4_2000_0_ペース","C4_2000_0_タイム差","C4_2000_0_斤量比","C4_2000_0_PCI","C4_2000_0_体重差",
	"C4_2200_0_枠番","C4_2200_0_馬番","C4_2200_0_走破時間","C4_2200_0_斤量","C4_2200_0_上がり","C4_2200_0_33Lap","C4_2200_0_通過順3","C4_2200_0_通過順4","C4_2200_0_ペース","C4_2200_0_タイム差","C4_2200_0_斤量比","C4_2200_0_PCI","C4_2200_0_体重差",
	"C4_2400_0_枠番","C4_2400_0_馬番","C4_2400_0_走破時間","C4_2400_0_斤量","C4_2400_0_上がり","C4_2400_0_33Lap","C4_2400_0_通過順3","C4_2400_0_通過順4","C4_2400_0_ペース","C4_2400_0_タイム差","C4_2400_0_斤量比","C4_2400_0_PCI","C4_2400_0_体重差",
	"C4_2500_1_枠番","C4_2500_1_馬番","C4_2500_1_走破時間","C4_2500_1_斤量","C4_2500_1_上がり","C4_2500_1_33Lap","C4_2500_1_通過順3","C4_2500_1_通過順4","C4_2500_1_ペース","C4_2500_1_タイム差","C4_2500_1_斤量比","C4_2500_1_PCI","C4_2500_1_体重差",
	"C5_1300_1_枠番","C5_1300_1_馬番","C5_1300_1_走破時間","C5_1300_1_斤量","C5_1300_1_上がり","C5_1300_1_33Lap","C5_1300_1_通過順3","C5_1300_1_通過順4","C5_1300_1_ペース","C5_1300_1_タイム差","C5_1300_1_斤量比","C5_1300_1_PCI","C5_1300_1_体重差",
	"C5_1400_0_枠番","C5_1400_0_馬番","C5_1400_0_走破時間","C5_1400_0_斤量","C5_1400_0_上がり","C5_1400_0_33Lap","C5_1400_0_通過順3","C5_1400_0_通過順4","C5_1400_0_ペース","C5_1400_0_タイム差","C5_1400_0_斤量比","C5_1400_0_PCI","C5_1400_0_体重差",
	"C5_1400_1_枠番","C5_1400_1_馬番","C5_1400_1_走破時間","C5_1400_1_斤量","C5_1400_1_上がり","C5_1400_1_33Lap","C5_1400_1_通過順3","C5_1400_1_通過順4","C5_1400_1_ペース","C5_1400_1_タイム差","C5_1400_1_斤量比","C5_1400_1_PCI","C5_1400_1_体重差",
	"C5_1600_0_枠番","C5_1600_0_馬番","C5_1600_0_走破時間","C5_1600_0_斤量","C5_1600_0_上がり","C5_1600_0_33Lap","C5_1600_0_通過順3","C5_1600_0_通過順4","C5_1600_0_ペース","C5_1600_0_タイム差","C5_1600_0_斤量比","C5_1600_0_PCI","C5_1600_0_体重差",
	"C5_1600_1_枠番","C5_1600_1_馬番","C5_1600_1_走破時間","C5_1600_1_斤量","C5_1600_1_上がり","C5_1600_1_33Lap","C5_1600_1_通過順3","C5_1600_1_通過順4","C5_1600_1_ペース","C5_1600_1_タイム差","C5_1600_1_斤量比","C5_1600_1_PCI","C5_1600_1_体重差",
	"C5_1800_0_枠番","C5_1800_0_馬番","C5_1800_0_走破時間","C5_1800_0_斤量","C5_1800_0_上がり","C5_1800_0_33Lap","C5_1800_0_通過順3","C5_1800_0_通過順4","C5_1800_0_ペース","C5_1800_0_タイム差","C5_1800_0_斤量比","C5_1800_0_PCI","C5_1800_0_体重差",
	"C5_2000_0_枠番","C5_2000_0_馬番","C5_2000_0_走破時間","C5_2000_0_斤量","C5_2000_0_上がり","C5_2000_0_33Lap","C5_2000_0_通過順3","C5_2000_0_通過順4","C5_2000_0_ペース","C5_2000_0_タイム差","C5_2000_0_斤量比","C5_2000_0_PCI","C5_2000_0_体重差",
	"C5_2100_1_枠番","C5_2100_1_馬番","C5_2100_1_走破時間","C5_2100_1_斤量","C5_2100_1_上がり","C5_2100_1_33Lap","C5_2100_1_通過順3","C5_2100_1_通過順4","C5_2100_1_ペース","C5_2100_1_タイム差","C5_2100_1_斤量比","C5_2100_1_PCI","C5_2100_1_体重差",
	"C5_2300_0_枠番","C5_2300_0_馬番","C5_2300_0_走破時間","C5_2300_0_斤量","C5_2300_0_上がり","C5_2300_0_33Lap","C5_2300_0_通過順3","C5_2300_0_通過順4","C5_2300_0_ペース","C5_2300_0_タイム差","C5_2300_0_斤量比","C5_2300_0_PCI","C5_2300_0_体重差",
	"C5_2400_0_枠番","C5_2400_0_馬番","C5_2400_0_走破時間","C5_2400_0_斤量","C5_2400_0_上がり","C5_2400_0_33Lap","C5_2400_0_通過順3","C5_2400_0_通過順4","C5_2400_0_ペース","C5_2400_0_タイム差","C5_2400_0_斤量比","C5_2400_0_PCI","C5_2400_0_体重差",
	"C5_2400_1_枠番","C5_2400_1_馬番","C5_2400_1_走破時間","C5_2400_1_斤量","C5_2400_1_上がり","C5_2400_1_33Lap","C5_2400_1_通過順3","C5_2400_1_通過順4","C5_2400_1_ペース","C5_2400_1_タイム差","C5_2400_1_斤量比","C5_2400_1_PCI","C5_2400_1_体重差",
	"C5_2500_0_枠番","C5_2500_0_馬番","C5_2500_0_走破時間","C5_2500_0_斤量","C5_2500_0_上がり","C5_2500_0_33Lap","C5_2500_0_通過順3","C5_2500_0_通過順4","C5_2500_0_ペース","C5_2500_0_タイム差","C5_2500_0_斤量比","C5_2500_0_PCI","C5_2500_0_体重差",
	"C5_3400_0_枠番","C5_3400_0_馬番","C5_3400_0_走破時間","C5_3400_0_斤量","C5_3400_0_上がり","C5_3400_0_33Lap","C5_3400_0_通過順3","C5_3400_0_通過順4","C5_3400_0_ペース","C5_3400_0_タイム差","C5_3400_0_斤量比","C5_3400_0_PCI","C5_3400_0_体重差",
	"C6_1200_0_枠番","C6_1200_0_馬番","C6_1200_0_走破時間","C6_1200_0_斤量","C6_1200_0_上がり","C6_1200_0_33Lap","C6_1200_0_通過順3","C6_1200_0_通過順4","C6_1200_0_ペース","C6_1200_0_タイム差","C6_1200_0_斤量比","C6_1200_0_PCI","C6_1200_0_体重差",
	"C6_1200_1_枠番","C6_1200_1_馬番","C6_1200_1_走破時間","C6_1200_1_斤量","C6_1200_1_上がり","C6_1200_1_33Lap","C6_1200_1_通過順3","C6_1200_1_通過順4","C6_1200_1_ペース","C6_1200_1_タイム差","C6_1200_1_斤量比","C6_1200_1_PCI","C6_1200_1_体重差",
	"C6_1600_0_枠番","C6_1600_0_馬番","C6_1600_0_走破時間","C6_1600_0_斤量","C6_1600_0_上がり","C6_1600_0_33Lap","C6_1600_0_通過順3","C6_1600_0_通過順4","C6_1600_0_ペース","C6_1600_0_タイム差","C6_1600_0_斤量比","C6_1600_0_PCI","C6_1600_0_体重差",
	"C6_1800_0_枠番","C6_1800_0_馬番","C6_1800_0_走破時間","C6_1800_0_斤量","C6_1800_0_上がり","C6_1800_0_33Lap","C6_1800_0_通過順3","C6_1800_0_通過順4","C6_1800_0_ペース","C6_1800_0_タイム差","C6_1800_0_斤量比","C6_1800_0_PCI","C6_1800_0_体重差",
	"C6_1800_1_枠番","C6_1800_1_馬番","C6_1800_1_走破時間","C6_1800_1_斤量","C6_1800_1_上がり","C6_1800_1_33Lap","C6_1800_1_通過順3","C6_1800_1_通過順4","C6_1800_1_ペース","C6_1800_1_タイム差","C6_1800_1_斤量比","C6_1800_1_PCI","C6_1800_1_体重差",
	"C6_2000_0_枠番","C6_2000_0_馬番","C6_2000_0_走破時間","C6_2000_0_斤量","C6_2000_0_上がり","C6_2000_0_33Lap","C6_2000_0_通過順3","C6_2000_0_通過順4","C6_2000_0_ペース","C6_2000_0_タイム差","C6_2000_0_斤量比","C6_2000_0_PCI","C6_2000_0_体重差",
	"C6_2200_0_枠番","C6_2200_0_馬番","C6_2200_0_走破時間","C6_2200_0_斤量","C6_2200_0_上がり","C6_2200_0_33Lap","C6_2200_0_通過順3","C6_2200_0_通過順4","C6_2200_0_ペース","C6_2200_0_タイム差","C6_2200_0_斤量比","C6_2200_0_PCI","C6_2200_0_体重差",
	"C6_2400_1_枠番","C6_2400_1_馬番","C6_2400_1_走破時間","C6_2400_1_斤量","C6_2400_1_上がり","C6_2400_1_33Lap","C6_2400_1_通過順3","C6_2400_1_通過順4","C6_2400_1_ペース","C6_2400_1_タイム差","C6_2400_1_斤量比","C6_2400_1_PCI","C6_2400_1_体重差",
	"C6_2500_0_枠番","C6_2500_0_馬番","C6_2500_0_走破時間","C6_2500_0_斤量","C6_2500_0_上がり","C6_2500_0_33Lap","C6_2500_0_通過順3","C6_2500_0_通過順4","C6_2500_0_ペース","C6_2500_0_タイム差","C6_2500_0_斤量比","C6_2500_0_PCI","C6_2500_0_体重差",
	"C6_2500_1_枠番","C6_2500_1_馬番","C6_2500_1_走破時間","C6_2500_1_斤量","C6_2500_1_上がり","C6_2500_1_33Lap","C6_2500_1_通過順3","C6_2500_1_通過順4","C6_2500_1_ペース","C6_2500_1_タイム差","C6_2500_1_斤量比","C6_2500_1_PCI","C6_2500_1_体重差",
	"C6_3600_0_枠番","C6_3600_0_馬番","C6_3600_0_走破時間","C6_3600_0_斤量","C6_3600_0_上がり","C6_3600_0_33Lap","C6_3600_0_通過順3","C6_3600_0_通過順4","C6_3600_0_ペース","C6_3600_0_タイム差","C6_3600_0_斤量比","C6_3600_0_PCI","C6_3600_0_体重差",
	"C7_1200_0_枠番","C7_1200_0_馬番","C7_1200_0_走破時間","C7_1200_0_斤量","C7_1200_0_上がり","C7_1200_0_33Lap","C7_1200_0_通過順3","C7_1200_0_通過順4","C7_1200_0_ペース","C7_1200_0_タイム差","C7_1200_0_斤量比","C7_1200_0_PCI","C7_1200_0_体重差",
	"C7_1200_1_枠番","C7_1200_1_馬番","C7_1200_1_走破時間","C7_1200_1_斤量","C7_1200_1_上がり","C7_1200_1_33Lap","C7_1200_1_通過順3","C7_1200_1_通過順4","C7_1200_1_ペース","C7_1200_1_タイム差","C7_1200_1_斤量比","C7_1200_1_PCI","C7_1200_1_体重差",
	"C7_1400_0_枠番","C7_1400_0_馬番","C7_1400_0_走破時間","C7_1400_0_斤量","C7_1400_0_上がり","C7_1400_0_33Lap","C7_1400_0_通過順3","C7_1400_0_通過順4","C7_1400_0_ペース","C7_1400_0_タイム差","C7_1400_0_斤量比","C7_1400_0_PCI","C7_1400_0_体重差",
	"C7_1400_1_枠番","C7_1400_1_馬番","C7_1400_1_走破時間","C7_1400_1_斤量","C7_1400_1_上がり","C7_1400_1_33Lap","C7_1400_1_通過順3","C7_1400_1_通過順4","C7_1400_1_ペース","C7_1400_1_タイム差","C7_1400_1_斤量比","C7_1400_1_PCI","C7_1400_1_体重差",
	"C7_1600_0_枠番","C7_1600_0_馬番","C7_1600_0_走破時間","C7_1600_0_斤量","C7_1600_0_上がり","C7_1600_0_33Lap","C7_1600_0_通過順3","C7_1600_0_通過順4","C7_1600_0_ペース","C7_1600_0_タイム差","C7_1600_0_斤量比","C7_1600_0_PCI","C7_1600_0_体重差",
	"C7_1800_1_枠番","C7_1800_1_馬番","C7_1800_1_走破時間","C7_1800_1_斤量","C7_1800_1_上がり","C7_1800_1_33Lap","C7_1800_1_通過順3","C7_1800_1_通過順4","C7_1800_1_ペース","C7_1800_1_タイム差","C7_1800_1_斤量比","C7_1800_1_PCI","C7_1800_1_体重差",
	"C7_1900_1_枠番","C7_1900_1_馬番","C7_1900_1_走破時間","C7_1900_1_斤量","C7_1900_1_上がり","C7_1900_1_33Lap","C7_1900_1_通過順3","C7_1900_1_通過順4","C7_1900_1_ペース","C7_1900_1_タイム差","C7_1900_1_斤量比","C7_1900_1_PCI","C7_1900_1_体重差",
	"C7_2000_0_枠番","C7_2000_0_馬番","C7_2000_0_走破時間","C7_2000_0_斤量","C7_2000_0_上がり","C7_2000_0_33Lap","C7_2000_0_通過順3","C7_2000_0_通過順4","C7_2000_0_ペース","C7_2000_0_タイム差","C7_2000_0_斤量比","C7_2000_0_PCI","C7_2000_0_体重差",
	"C7_2200_0_枠番","C7_2200_0_馬番","C7_2200_0_走破時間","C7_2200_0_斤量","C7_2200_0_上がり","C7_2200_0_33Lap","C7_2200_0_通過順3","C7_2200_0_通過順4","C7_2200_0_ペース","C7_2200_0_タイム差","C7_2200_0_斤量比","C7_2200_0_PCI","C7_2200_0_体重差",
	"C7_2500_1_枠番","C7_2500_1_馬番","C7_2500_1_走破時間","C7_2500_1_斤量","C7_2500_1_上がり","C7_2500_1_33Lap","C7_2500_1_通過順3","C7_2500_1_通過順4","C7_2500_1_ペース","C7_2500_1_タイム差","C7_2500_1_斤量比","C7_2500_1_PCI","C7_2500_1_体重差",
	"C7_3000_0_枠番","C7_3000_0_馬番","C7_3000_0_走破時間","C7_3000_0_斤量","C7_3000_0_上がり","C7_3000_0_33Lap","C7_3000_0_通過順3","C7_3000_0_通過順4","C7_3000_0_ペース","C7_3000_0_タイム差","C7_3000_0_斤量比","C7_3000_0_PCI","C7_3000_0_体重差",
	"C8_1200_0_枠番","C8_1200_0_馬番","C8_1200_0_走破時間","C8_1200_0_斤量","C8_1200_0_上がり","C8_1200_0_33Lap","C8_1200_0_通過順3","C8_1200_0_通過順4","C8_1200_0_ペース","C8_1200_0_タイム差","C8_1200_0_斤量比","C8_1200_0_PCI","C8_1200_0_体重差",
	"C8_1200_1_枠番","C8_1200_1_馬番","C8_1200_1_走破時間","C8_1200_1_斤量","C8_1200_1_上がり","C8_1200_1_33Lap","C8_1200_1_通過順3","C8_1200_1_通過順4","C8_1200_1_ペース","C8_1200_1_タイム差","C8_1200_1_斤量比","C8_1200_1_PCI","C8_1200_1_体重差",
	"C8_1400_0_枠番","C8_1400_0_馬番","C8_1400_0_走破時間","C8_1400_0_斤量","C8_1400_0_上がり","C8_1400_0_33Lap","C8_1400_0_通過順3","C8_1400_0_通過順4","C8_1400_0_ペース","C8_1400_0_タイム差","C8_1400_0_斤量比","C8_1400_0_PCI","C8_1400_0_体重差",
	"C8_1400_1_枠番","C8_1400_1_馬番","C8_1400_1_走破時間","C8_1400_1_斤量","C8_1400_1_上がり","C8_1400_1_33Lap","C8_1400_1_通過順3","C8_1400_1_通過順4","C8_1400_1_ペース","C8_1400_1_タイム差","C8_1400_1_斤量比","C8_1400_1_PCI","C8_1400_1_体重差",
	"C8_1600_0_枠番","C8_1600_0_馬番","C8_1600_0_走破時間","C8_1600_0_斤量","C8_1600_0_上がり","C8_1600_0_33Lap","C8_1600_0_通過順3","C8_1600_0_通過順4","C8_1600_0_ペース","C8_1600_0_タイム差","C8_1600_0_斤量比","C8_1600_0_PCI","C8_1600_0_体重差",
	"C8_1800_0_枠番","C8_1800_0_馬番","C8_1800_0_走破時間","C8_1800_0_斤量","C8_1800_0_上がり","C8_1800_0_33Lap","C8_1800_0_通過順3","C8_1800_0_通過順4","C8_1800_0_ペース","C8_1800_0_タイム差","C8_1800_0_斤量比","C8_1800_0_PCI","C8_1800_0_体重差",
	"C8_1800_1_枠番","C8_1800_1_馬番","C8_1800_1_走破時間","C8_1800_1_斤量","C8_1800_1_上がり","C8_1800_1_33Lap","C8_1800_1_通過順3","C8_1800_1_通過順4","C8_1800_1_ペース","C8_1800_1_タイム差","C8_1800_1_斤量比","C8_1800_1_PCI","C8_1800_1_体重差",
	"C8_1900_1_枠番","C8_1900_1_馬番","C8_1900_1_走破時間","C8_1900_1_斤量","C8_1900_1_上がり","C8_1900_1_33Lap","C8_1900_1_通過順3","C8_1900_1_通過順4","C8_1900_1_ペース","C8_1900_1_タイム差","C8_1900_1_斤量比","C8_1900_1_PCI","C8_1900_1_体重差",
	"C8_2000_0_枠番","C8_2000_0_馬番","C8_2000_0_走破時間","C8_2000_0_斤量","C8_2000_0_上がり","C8_2000_0_33Lap","C8_2000_0_通過順3","C8_2000_0_通過順4","C8_2000_0_ペース","C8_2000_0_タイム差","C8_2000_0_斤量比","C8_2000_0_PCI","C8_2000_0_体重差",
	"C8_2200_0_枠番","C8_2200_0_馬番","C8_2200_0_走破時間","C8_2200_0_斤量","C8_2200_0_上がり","C8_2200_0_33Lap","C8_2200_0_通過順3","C8_2200_0_通過順4","C8_2200_0_ペース","C8_2200_0_タイム差","C8_2200_0_斤量比","C8_2200_0_PCI","C8_2200_0_体重差",
	"C8_2400_0_枠番","C8_2400_0_馬番","C8_2400_0_走破時間","C8_2400_0_斤量","C8_2400_0_上がり","C8_2400_0_33Lap","C8_2400_0_通過順3","C8_2400_0_通過順4","C8_2400_0_ペース","C8_2400_0_タイム差","C8_2400_0_斤量比","C8_2400_0_PCI","C8_2400_0_体重差",
	"C8_3000_0_枠番","C8_3000_0_馬番","C8_3000_0_走破時間","C8_3000_0_斤量","C8_3000_0_上がり","C8_3000_0_33Lap","C8_3000_0_通過順3","C8_3000_0_通過順4","C8_3000_0_ペース","C8_3000_0_タイム差","C8_3000_0_斤量比","C8_3000_0_PCI","C8_3000_0_体重差",
	"C8_3200_0_枠番","C8_3200_0_馬番","C8_3200_0_走破時間","C8_3200_0_斤量","C8_3200_0_上がり","C8_3200_0_33Lap","C8_3200_0_通過順3","C8_3200_0_通過順4","C8_3200_0_ペース","C8_3200_0_タイム差","C8_3200_0_斤量比","C8_3200_0_PCI","C8_3200_0_体重差",
	"C9_1200_0_枠番","C9_1200_0_馬番","C9_1200_0_走破時間","C9_1200_0_斤量","C9_1200_0_上がり","C9_1200_0_33Lap","C9_1200_0_通過順3","C9_1200_0_通過順4","C9_1200_0_ペース","C9_1200_0_タイム差","C9_1200_0_斤量比","C9_1200_0_PCI","C9_1200_0_体重差",
	"C9_1200_1_枠番","C9_1200_1_馬番","C9_1200_1_走破時間","C9_1200_1_斤量","C9_1200_1_上がり","C9_1200_1_33Lap","C9_1200_1_通過順3","C9_1200_1_通過順4","C9_1200_1_ペース","C9_1200_1_タイム差","C9_1200_1_斤量比","C9_1200_1_PCI","C9_1200_1_体重差",
	"C9_1400_0_枠番","C9_1400_0_馬番","C9_1400_0_走破時間","C9_1400_0_斤量","C9_1400_0_上がり","C9_1400_0_33Lap","C9_1400_0_通過順3","C9_1400_0_通過順4","C9_1400_0_ペース","C9_1400_0_タイム差","C9_1400_0_斤量比","C9_1400_0_PCI","C9_1400_0_体重差",
	"C9_1400_1_枠番","C9_1400_1_馬番","C9_1400_1_走破時間","C9_1400_1_斤量","C9_1400_1_上がり","C9_1400_1_33Lap","C9_1400_1_通過順3","C9_1400_1_通過順4","C9_1400_1_ペース","C9_1400_1_タイム差","C9_1400_1_斤量比","C9_1400_1_PCI","C9_1400_1_体重差",
	"C9_1600_0_枠番","C9_1600_0_馬番","C9_1600_0_走破時間","C9_1600_0_斤量","C9_1600_0_上がり","C9_1600_0_33Lap","C9_1600_0_通過順3","C9_1600_0_通過順4","C9_1600_0_ペース","C9_1600_0_タイム差","C9_1600_0_斤量比","C9_1600_0_PCI","C9_1600_0_体重差",
	"C9_1800_0_枠番","C9_1800_0_馬番","C9_1800_0_走破時間","C9_1800_0_斤量","C9_1800_0_上がり","C9_1800_0_33Lap","C9_1800_0_通過順3","C9_1800_0_通過順4","C9_1800_0_ペース","C9_1800_0_タイム差","C9_1800_0_斤量比","C9_1800_0_PCI","C9_1800_0_体重差",
	"C9_1800_1_枠番","C9_1800_1_馬番","C9_1800_1_走破時間","C9_1800_1_斤量","C9_1800_1_上がり","C9_1800_1_33Lap","C9_1800_1_通過順3","C9_1800_1_通過順4","C9_1800_1_ペース","C9_1800_1_タイム差","C9_1800_1_斤量比","C9_1800_1_PCI","C9_1800_1_体重差",
	"C9_2000_0_枠番","C9_2000_0_馬番","C9_2000_0_走破時間","C9_2000_0_斤量","C9_2000_0_上がり","C9_2000_0_33Lap","C9_2000_0_通過順3","C9_2000_0_通過順4","C9_2000_0_ペース","C9_2000_0_タイム差","C9_2000_0_斤量比","C9_2000_0_PCI","C9_2000_0_体重差",
	"C9_2000_1_枠番","C9_2000_1_馬番","C9_2000_1_走破時間","C9_2000_1_斤量","C9_2000_1_上がり","C9_2000_1_33Lap","C9_2000_1_通過順3","C9_2000_1_通過順4","C9_2000_1_ペース","C9_2000_1_タイム差","C9_2000_1_斤量比","C9_2000_1_PCI","C9_2000_1_体重差",
	"C9_2200_0_枠番","C9_2200_0_馬番","C9_2200_0_走破時間","C9_2200_0_斤量","C9_2200_0_上がり","C9_2200_0_33Lap","C9_2200_0_通過順3","C9_2200_0_通過順4","C9_2200_0_ペース","C9_2200_0_タイム差","C9_2200_0_斤量比","C9_2200_0_PCI","C9_2200_0_体重差",
	"C9_2400_0_枠番","C9_2400_0_馬番","C9_2400_0_走破時間","C9_2400_0_斤量","C9_2400_0_上がり","C9_2400_0_33Lap","C9_2400_0_通過順3","C9_2400_0_通過順4","C9_2400_0_ペース","C9_2400_0_タイム差","C9_2400_0_斤量比","C9_2400_0_PCI","C9_2400_0_体重差",
	"C9_2600_0_枠番","C9_2600_0_馬番","C9_2600_0_走破時間","C9_2600_0_斤量","C9_2600_0_上がり","C9_2600_0_33Lap","C9_2600_0_通過順3","C9_2600_0_通過順4","C9_2600_0_ペース","C9_2600_0_タイム差","C9_2600_0_斤量比","C9_2600_0_PCI","C9_2600_0_体重差",
	"C9_3000_0_枠番","C9_3000_0_馬番","C9_3000_0_走破時間","C9_3000_0_斤量","C9_3000_0_上がり","C9_3000_0_33Lap","C9_3000_0_通過順3","C9_3000_0_通過順4","C9_3000_0_ペース","C9_3000_0_タイム差","C9_3000_0_斤量比","C9_3000_0_PCI","C9_3000_0_体重差",
	"C9_3200_0_枠番","C9_3200_0_馬番","C9_3200_0_走破時間","C9_3200_0_斤量","C9_3200_0_上がり","C9_3200_0_33Lap","C9_3200_0_通過順3","C9_3200_0_通過順4","C9_3200_0_ペース","C9_3200_0_タイム差","C9_3200_0_斤量比","C9_3200_0_PCI","C9_3200_0_体重差",
	"C10_1000_1_枠番","C10_1000_1_馬番","C10_1000_1_走破時間","C10_1000_1_斤量","C10_1000_1_上がり","C10_1000_1_33Lap","C10_1000_1_通過順3","C10_1000_1_通過順4","C10_1000_1_ペース","C10_1000_1_タイム差","C10_1000_1_斤量比","C10_1000_1_PCI","C10_1000_1_体重差",
	"C10_1200_0_枠番","C10_1200_0_馬番","C10_1200_0_走破時間","C10_1200_0_斤量","C10_1200_0_上がり","C10_1200_0_33Lap","C10_1200_0_通過順3","C10_1200_0_通過順4","C10_1200_0_ペース","C10_1200_0_タイム差","C10_1200_0_斤量比","C10_1200_0_PCI","C10_1200_0_体重差",
	"C10_1700_0_枠番","C10_1700_0_馬番","C10_1700_0_走破時間","C10_1700_0_斤量","C10_1700_0_上がり","C10_1700_0_33Lap","C10_1700_0_通過順3","C10_1700_0_通過順4","C10_1700_0_ペース","C10_1700_0_タイム差","C10_1700_0_斤量比","C10_1700_0_PCI","C10_1700_0_体重差",
	"C10_1700_1_枠番","C10_1700_1_馬番","C10_1700_1_走破時間","C10_1700_1_斤量","C10_1700_1_上がり","C10_1700_1_33Lap","C10_1700_1_通過順3","C10_1700_1_通過順4","C10_1700_1_ペース","C10_1700_1_タイム差","C10_1700_1_斤量比","C10_1700_1_PCI","C10_1700_1_体重差",
	"C10_1800_0_枠番","C10_1800_0_馬番","C10_1800_0_走破時間","C10_1800_0_斤量","C10_1800_0_上がり","C10_1800_0_33Lap","C10_1800_0_通過順3","C10_1800_0_通過順4","C10_1800_0_ペース","C10_1800_0_タイム差","C10_1800_0_斤量比","C10_1800_0_PCI","C10_1800_0_体重差",
	"C10_2000_0_枠番","C10_2000_0_馬番","C10_2000_0_走破時間","C10_2000_0_斤量","C10_2000_0_上がり","C10_2000_0_33Lap","C10_2000_0_通過順3","C10_2000_0_通過順4","C10_2000_0_ペース","C10_2000_0_タイム差","C10_2000_0_斤量比","C10_2000_0_PCI","C10_2000_0_体重差",
	"C10_2400_1_枠番","C10_2400_1_馬番","C10_2400_1_走破時間","C10_2400_1_斤量","C10_2400_1_上がり","C10_2400_1_33Lap","C10_2400_1_通過順3","C10_2400_1_通過順4","C10_2400_1_ペース","C10_2400_1_タイム差","C10_2400_1_斤量比","C10_2400_1_PCI","C10_2400_1_体重差",
	"C10_2600_0_枠番","C10_2600_0_馬番","C10_2600_0_走破時間","C10_2600_0_斤量","C10_2600_0_上がり","C10_2600_0_33Lap","C10_2600_0_通過順3","C10_2600_0_通過順4","C10_2600_0_ペース","C10_2600_0_タイム差","C10_2600_0_斤量比","C10_2600_0_PCI","C10_2600_0_体重差"
    ]
    all_results.append(colm_items)
    
    # テーブルを指定
    table = soup.find("table", {"class": "Shutuba_Table"})
    # テーブル内の全ての行を取得
    main_rows = table.find_all("tr")
    url_list = []

    main_place2 = int(main_place)
    course_id = str(main_place2) +'_'+ str(main_cls) +'_'+ str(main_course) +'_'+ str(main_track)
    class_id = course_id +'_'+ str(main_distance)
    df_pci_avg = df_course_time[ df_course_time["class_id"]==class_id ]

    # 各行から必要な情報を取り出し
    for i, row in enumerate(main_rows[2:], start=1):# ヘッダ行をスキップ
        cols = row.find_all("td")
        main_waku = cols[0].text.strip()
        main_umaban = cols[1].text.strip()
        sign = cols[2].text.strip()
        if sign == "除外":
            continue
        
        uma = cols[3].text.strip()
        a_tag = cols[3].find('a')
        url = a_tag.get('href')
        url_list.append(url)
        
        a_tag2 = cols[6].find('a')
        url2 = a_tag2.get('href')
        for zzz in range(10):
            time.sleep(1)
            response = requests.get(url2, headers=header)
            if response.status_code == 200:
                break

        soup = BeautifulSoup(response.content, "html.parser")
        element2 = soup.find("div", class_="db_head_name")
        h1_text = element2.find('h1').get_text(strip=True)
        name = h1_text.split("\u00a0")[0]
        
        main_kishu = re.sub(r'[Ａ-Ｚａ-ｚ．]', '', name)

        main_odds = cols[9].find("span").text.strip()
        main_pop = cols[10].find("span").text.strip()
        #体重
        main_horse_weight = cols[8].text.strip()
        main_weight = 0
        main_weight_dif = 0
        try:
            main_weight = int(main_horse_weight.split("(")[0])
        except:
            main_weight = 0

        try:
            main_weight_dif = int(main_horse_weight.split("(")[1][0:-1])
        except:
            main_weight_dif = 0
        
        #斤量
        main_handicap = cols[5].text.strip()

        ##斤量負担
        try:
            main_weight_ratio =( float(main_handicap)/float(main_weight) ) * ( float(main_distance)/1800 )
            main_weight_ratio = round(main_weight_ratio,3)
            main_weight_laod = 0
            if float(main_weight_ratio) > 0.125:
                main_weight_laod = round( (main_weight_ratio-0.125) / ((int(main_distance)/1800)*0.2), 3)
        except:
            main_weight_ratio = 0
            main_weight_laod = 0

        #性
        main_sex = cols[4].text.strip()[0]
        sex_mapping = {'牡':0, '牝': 1, 'セ': 2}
        main_sex = sex_mapping.get(main_sex)
        #齢
        main_age = cols[4].text.strip()[1]
        if int(main_age)==1:
            main_age=10
        result = [race_id, uma, main_kishu, main_umaban, "", main_odds, "", "", main_weight, main_weight_dif, main_sex,
        main_age, main_handicap, "", main_pop, main_race_name, race_date, main_location, main_cls, main_track, main_distance,
        main_mawari, main_baba, main_tenki, main_place, main_location]
        age_map = age_mapping(main_age)
        horse_id = uma

        '''
        main_place2 = int(main_place)
        course_id = str(main_place2) +'_'+ str(main_cls) +'_'+ str(main_course) +'_'+ str(main_track)
        class_id = course_id +'_'+ str(main_distance)
        '''

        main_tracen = cols[7].text.strip()[0]
        if main_tracen=="美":
            main_tracen="東"
        else:
            main_tracen="西"
        
        results = []  # 馬単位のレース結果を保存するためのリスト
        for zzz in range(10):
            time.sleep(1)
            response = requests.get(url, headers=header)
            if response.status_code == 200:
                break

        # ステータスコードが200以外の場合はエラーが発生したとみなし、処理をスキップ
        if response.status_code != 200:
            print(f"Error occurred while fetching data from {url}")
            continue

        soup_list = BeautifulSoup(response.content, "html.parser")
        
        # テーブルを指定
        table = soup_list.find("table", {"class": "db_h_race_results nk_tb_common"})
        
        # テーブル内の全ての行を取得
        rows = ''
        try:
            rows = table.find_all("tr")
        except:
            continue
        
        #pace = df_time[ df_time["class_id"]==class_id ]
        #pace = pace["ペース"].iloc[0]

        result_data = []
        result_data = df_race[ (df_race["馬"]==uma) & (df_race["日付"]<race_date)]

        #result_data.loc[:,"平均PCI"] = df_pci_avg["平均PCI"].values.tolist()[0]

        race_count=0
        chk_uma = ""
        for i, row in enumerate(rows[1:], start=1):# ヘッダ行をスキップ
            if race_count==1:
                break
            cols = row.find_all("td")
            
            if cols[11].text.isdecimal()==False:
                continue

            # 日付を解析
            str_date = cols[0].text.strip()
            dt = datetime.strptime(str_date, '%Y/%m/%d')
            if dt<=ago_date:
                break

            pl = course_mapping.get(cols[1].text[1:3])
            if dt < cutoff_date:
                #距離
                distance = cols[14].text.strip()
                distance2 = distance[1:5]
                #芝・ダート
                track = distance[0]
                shiba_mapping = {'芝': 0, 'ダ': 1, '障': 2}
                track = shiba_mapping.get(track)
                #↓出走レースとtrackが違っていたら処理を飛ばす
                if track_chk != track:
                    continue
                
                ki = cols[1].text[3:5]
                if len(ki)==1:
                    ki = "0"+ki
                r = cols[3].text
                if len(r)==1:
                    r = "0" + r

                try:
                    race_list_id = (cols[0].text).split("/")[0] + pl +'0'+ cols[1].text[0] + ki + r
                except:
                    continue
        
                a_tag3 = cols[4].find('a')
                url3 = a_tag3.get('href')

                race_rank = cols[11].text

                result_data = []
                result_data = data.loc[ (data["race_id"].astype(str)==race_list_id) & (data["着順"].astype(str)==race_rank) & (data["馬"].astype(str)==uma) ].copy()

                if result_data.empty==True:
                    continue
                else:
                    result_data["枠番"] = main_waku
                    result_data["馬番"] = main_umaban
                    print(uma +'：'+ str(dt) +'：'+ cols[4].text +'：'+ str(race_count))
                    all_results.append(result_data.iloc[0])
                    race_count = race_count+1


                '''                
                if result_data.empty==True:
                    continue
                else:
                    result_data["枠番"] = main_waku
                    result_data["馬番"] = main_umaban
                    result_data["体重"] = main_weight
                    result_data["体重変化"] = main_weight_dif
                    result_data["斤量"] = main_handicap
                    result_data["齢"] = main_age
                    result_data['斤量比'] = main_weight_ratio
                    #result_data['斤量負担'] = main_weight_laod
                    result_data['体重差'] = main_weight-result_data['平均体重'].iloc[0]
                    result_data['距離'] = main_distance
                    
                    win_weight = df_horse[ df_horse["馬"]==horse_id ]
                    win_age = age_mapping(main_age)
                    if win_weight.empty==False:
                        w = win_weight["勝利体重"+str(win_age)].iloc[0]
                        if math.isnan(w):
                            w = win_weight["体重"+str(win_age)].iloc[0]
                            if math.isnan(w):
                                if win_age>1:
                                    w = win_weight["勝利体重"+str(win_age-1)].iloc[0]
                                    if math.isnan(w):
                                        w = win_weight["体重"+str(win_age-1)].iloc[0]
                                        
                        result_data["平均体重"] = w

                    if chk_uma!=uma:
                        chk_uma = uma
                        df_hl = df_race[ (df_race["馬"]==uma) & (df_race["日付"]<race_date) ]
                        df_hl = df_hl.sort_values(['日付'])
                        if df_hl.empty==False:
                            df_hl = df_hl.tail(1)
                            ri = df_hl.index
                            course_point = df_hl.loc[ri, "C1_0_0":"ダート"].values.tolist()

                        umaban_rate = df_race[ (df_race["日付"]<race_date) & (df_race["馬番"].astype(str)==main_umaban) & (df_race["場id"]==main_place2) & (df_race["芝・ダート"]==main_track) & (df_race["コース内外"]==main_course) & (df_race["距離"].astype(str)==main_distance) ]
                        umaban_rate = umaban_rate.sort_values(['日付',"race_id"], ascending=False)
                        if umaban_rate.empty==False:
                            umaban_point = umaban_rate["馬番成績"].head(1).fillna(0.5).values.tolist()[0]
                        else:
                            umaban_point = 0.5

                        jockey_rate = df_race[ (df_race["日付"]<race_date) & (df_race["騎手"]==main_kishu) & (df_race["場id"]==main_place2) & (df_race["芝・ダート"]==main_track) & (df_race["コース内外"]==main_course) & (df_race["距離"].astype(str)==main_distance) ]
                        if jockey_rate.empty==False:
                            jockey_rate = jockey_rate["騎手成績"].tail(1).values.tolist()
                            jockey_point = jockey_rate[0]
                        else:
                            jockey_point = 0.5

                        main_trainer = df_race[ df_race["馬"]==uma ]
                        main_trainer = main_trainer["調教師"].values.tolist()[0]
                        trainer_rate = df_race[ (df_race["日付"]<race_date) & (df_race["調教師"]==main_trainer) & (df_race["場id"]==main_place2) & (df_race["芝・ダート"]==main_track) & (df_race["コース内外"]==main_course) & (df_race["距離"].astype(str)==main_distance) ]
                        if trainer_rate.empty==False:
                            trainer_rate = trainer_rate["調教師成績"].head(1).values.tolist()
                            trainer_point = trainer_rate[0]
                        else:
                            trainer_point = 0.5

                        main_father = df_race[ df_race["馬"]==uma ]
                        main_father = main_father["父"].values.tolist()[0]
                        father_rate = df_race[ (df_race["日付"]<race_date) & (df_race["父"]==main_father) & (df_race["場id"]==main_place2) & (df_race["芝・ダート"]==main_track) & (df_race["コース内外"]==main_course) & (df_race["距離"].astype(str)==main_distance) ]
                        if father_rate.empty==False:
                            father_rate = father_rate["父成績"].head(1).values.tolist()
                            father_point = father_rate[0]
                        else:
                            father_point = 0.5

                    r_id = result_data.index
                    result_data.loc[r_id, "C1_0_0":"ダート"] = course_point

                    result_data['馬番成績'] = umaban_point
                    result_data['騎手成績'] = jockey_point
                    result_data['調教師成績'] = trainer_point
                    result_data['父成績'] = father_point

                    wa = round(result_data["体重差"].values.tolist()[0],1)
                    
                    print(uma +'：'+ str(dt) +'：'+ cols[4].text +'：'+ str(race_count) ＋'：'+ str(wa))
                    all_results.append(result_data.iloc[0])
                    race_count = race_count+1
                    '''

    # convert list to DataFrame
    df_all_results = pd.DataFrame(all_results)
    df_all_results.columns = df_all_results.iloc[0]  # 最初の行を列名として設定
    df_all_results = df_all_results.drop(df_all_results.index[0])  # 最初の行を削除
            
    date_object = datetime.strptime(race_date, "%Y/%m/%d")

    # 日付を指定のフォーマットに変換
    formatted_date = date_object.strftime('%Y%m%d')

    '''
    df_all_results["平均PCI"] = df_pci_avg["平均PCI"].values.tolist()[0]
    df_all_results["PCI差"] = df_all_results["平均PCI"].astype(float) - df_all_results["PCI"].astype(float)
    datas = ["C1_0_0","C1_1_0","C2_0_0","C2_1_0","C3_0_0","C3_1_0","C4_0_0","C4_0_1","C4_1_0","C5_0_0","C5_1_0","C6_0_0","C6_0_1","C6_1_0","C7_0_0","C7_1_0","C8_0_0","C8_0_1","C8_1_0","C9_0_0","C9_0_1","C9_1_0","C10_0_0","C10_1_0","左回","右回","直線長","直線短","急カーブ","複合カーブ","スパイラル","小回","ゴール前平坦","ゴール前緩坂","ゴール前急坂","芝","ダート","馬番成績","騎手成績","調教師成績","父成績"]
    for val in datas:
        df_all_results[val] = df_all_results[val].fillna(0.5)
    '''
    # データをCSVファイルに出力する
    df_all_results.to_csv('race_data/race_data_' + racecourse + '_'+race_num+'R_' + formatted_date + '.csv', index=False)
    horse_no = df_all_results["馬番"].values.tolist()
    horse_name = df_all_results["馬"].values.tolist()

    new_data = pd.read_csv('race_data/race_data_' + racecourse + '_'+race_num+'R_' + formatted_date + '.csv')
    new_data.replace('', np.nan, inplace=True)
    # 着順列を除外 (この列が存在する場合)
    drop_item = ["race_id","馬","騎手","枠番","馬番","走破時間","着順","体重","体重変化","性","齢","斤量","上がり","日付","クラス","芝・ダート","距離","回り","馬場","コース内外","場id","6F","33Lap","side3","side4","脚質","通過順3","通過順4","ペース","3Fペース","トレセン","調教師","馬主","Sラップ","タイム差","走破時間換算","斤量比","class_id","course_id","PCI","平均体重","体重差","平均PCI","PCI差","父","父父","母父","C1_0_0","C1_1_0","C2_0_0","C2_1_0","C3_0_0","C3_1_0","C4_0_0","C4_0_1","C4_1_0","C5_0_0","C5_1_0","C6_0_0","C6_0_1","C6_1_0","C7_0_0","C7_1_0","C8_0_0","C8_0_1","C8_1_0","C9_0_0","C9_0_1","C9_1_0","C10_0_0","C10_1_0","左回","右回","直線長","直線短","急カーブ","複合カーブ","スパイラル","小回","ゴール前平坦","ゴール前緩坂","ゴール前急坂","芝","ダート","馬番成績","騎手成績","調教師成績","父成績"]+drop_item
    new_data = new_data.drop(drop_item, axis=1)

    # モデルの読み込み
    model = lgb.Booster(model_file='model/' + class_id +'model.txt')
    # Make prediction
    y_new_pred = model.predict(new_data)

    # '予測結果'という新しい列を2列目に追加
    new_data.insert(0, '馬番', horse_no)
    new_data.insert(1, '馬', horse_name)
    new_data.insert(2, '予測結果', y_new_pred)
    new_data.insert(3, '予測平均', y_new_pred)
    new_data.insert(4, 'レース数', horse_name)

    new_data2 = new_data
    new_data2.to_csv('race_data/race_data_' + racecourse + '_'+race_num+'R_' + formatted_date + '_shift.csv', index=False, encoding="shift_jis")
    
    new_data = new_data.groupby(['馬番','馬']).agg({'予測結果':'max','予測平均':'mean','レース数':'count'}).reset_index()
    new_data = new_data.sort_values('予測結果', ascending=False)
    # Save prediction
    new_data.to_csv('predict_result/race_data_' + racecourse + '_'+race_num+'R_' + formatted_date + '.csv', index=False)

    
print("予想データ取得・予想：完了")    
